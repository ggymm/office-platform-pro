// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

/// *
///  消息体
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.Message)
pub struct Message {
    // message fields
    // @@protoc_insertion_point(field:message.Message.Id)
    pub Id: i64,
    // @@protoc_insertion_point(field:message.Message.Seq)
    pub Seq: i64,
    // @@protoc_insertion_point(field:message.Message.From)
    pub From: i64,
    // @@protoc_insertion_point(field:message.Message.To)
    pub To: i64,
    // @@protoc_insertion_point(field:message.Message.CreateTime)
    pub CreateTime: i64,
    // @@protoc_insertion_point(field:message.Message.Cmd)
    pub Cmd: ::protobuf::EnumOrUnknown<CommandType>,
    // @@protoc_insertion_point(field:message.Message.MsgType)
    pub MsgType: ::protobuf::EnumOrUnknown<MsgType>,
    // @@protoc_insertion_point(field:message.Message.ChatType)
    pub ChatType: ::protobuf::EnumOrUnknown<ChatType>,
    // @@protoc_insertion_point(field:message.Message.GroupId)
    pub GroupId: ::std::string::String,
    // @@protoc_insertion_point(field:message.Message.Content)
    pub Content: ::std::string::String,
    // @@protoc_insertion_point(field:message.Message.Extras)
    pub Extras: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:message.Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Id",
            |m: &Message| { &m.Id },
            |m: &mut Message| { &mut m.Id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Seq",
            |m: &Message| { &m.Seq },
            |m: &mut Message| { &mut m.Seq },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "From",
            |m: &Message| { &m.From },
            |m: &mut Message| { &mut m.From },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "To",
            |m: &Message| { &m.To },
            |m: &mut Message| { &mut m.To },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CreateTime",
            |m: &Message| { &m.CreateTime },
            |m: &mut Message| { &mut m.CreateTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Cmd",
            |m: &Message| { &m.Cmd },
            |m: &mut Message| { &mut m.Cmd },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MsgType",
            |m: &Message| { &m.MsgType },
            |m: &mut Message| { &mut m.MsgType },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ChatType",
            |m: &Message| { &m.ChatType },
            |m: &mut Message| { &mut m.ChatType },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GroupId",
            |m: &Message| { &m.GroupId },
            |m: &mut Message| { &mut m.GroupId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Content",
            |m: &Message| { &m.Content },
            |m: &mut Message| { &mut m.Content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Extras",
            |m: &Message| { &m.Extras },
            |m: &mut Message| { &mut m.Extras },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.Id = is.read_int64()?;
                },
                16 => {
                    self.Seq = is.read_int64()?;
                },
                24 => {
                    self.From = is.read_int64()?;
                },
                32 => {
                    self.To = is.read_int64()?;
                },
                40 => {
                    self.CreateTime = is.read_int64()?;
                },
                48 => {
                    self.Cmd = is.read_enum_or_unknown()?;
                },
                56 => {
                    self.MsgType = is.read_enum_or_unknown()?;
                },
                64 => {
                    self.ChatType = is.read_enum_or_unknown()?;
                },
                74 => {
                    self.GroupId = is.read_string()?;
                },
                82 => {
                    self.Content = is.read_string()?;
                },
                90 => {
                    self.Extras = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.Id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.Id);
        }
        if self.Seq != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.Seq);
        }
        if self.From != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.From);
        }
        if self.To != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.To);
        }
        if self.CreateTime != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.CreateTime);
        }
        if self.Cmd != ::protobuf::EnumOrUnknown::new(CommandType::COMMAND_UNKNOW) {
            my_size += ::protobuf::rt::int32_size(6, self.Cmd.value());
        }
        if self.MsgType != ::protobuf::EnumOrUnknown::new(MsgType::MSG_TYPE_UNKNOW) {
            my_size += ::protobuf::rt::int32_size(7, self.MsgType.value());
        }
        if self.ChatType != ::protobuf::EnumOrUnknown::new(ChatType::CHAT_TYPE_UNKNOW) {
            my_size += ::protobuf::rt::int32_size(8, self.ChatType.value());
        }
        if !self.GroupId.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.GroupId);
        }
        if !self.Content.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.Content);
        }
        if !self.Extras.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.Extras);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.Id != 0 {
            os.write_int64(1, self.Id)?;
        }
        if self.Seq != 0 {
            os.write_int64(2, self.Seq)?;
        }
        if self.From != 0 {
            os.write_int64(3, self.From)?;
        }
        if self.To != 0 {
            os.write_int64(4, self.To)?;
        }
        if self.CreateTime != 0 {
            os.write_int64(5, self.CreateTime)?;
        }
        if self.Cmd != ::protobuf::EnumOrUnknown::new(CommandType::COMMAND_UNKNOW) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.Cmd))?;
        }
        if self.MsgType != ::protobuf::EnumOrUnknown::new(MsgType::MSG_TYPE_UNKNOW) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.MsgType))?;
        }
        if self.ChatType != ::protobuf::EnumOrUnknown::new(ChatType::CHAT_TYPE_UNKNOW) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.ChatType))?;
        }
        if !self.GroupId.is_empty() {
            os.write_string(9, &self.GroupId)?;
        }
        if !self.Content.is_empty() {
            os.write_string(10, &self.Content)?;
        }
        if !self.Extras.is_empty() {
            os.write_string(11, &self.Extras)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.Id = 0;
        self.Seq = 0;
        self.From = 0;
        self.To = 0;
        self.CreateTime = 0;
        self.Cmd = ::protobuf::EnumOrUnknown::new(CommandType::COMMAND_UNKNOW);
        self.MsgType = ::protobuf::EnumOrUnknown::new(MsgType::MSG_TYPE_UNKNOW);
        self.ChatType = ::protobuf::EnumOrUnknown::new(ChatType::CHAT_TYPE_UNKNOW);
        self.GroupId.clear();
        self.Content.clear();
        self.Extras.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: Message = Message {
            Id: 0,
            Seq: 0,
            From: 0,
            To: 0,
            CreateTime: 0,
            Cmd: ::protobuf::EnumOrUnknown::from_i32(0),
            MsgType: ::protobuf::EnumOrUnknown::from_i32(0),
            ChatType: ::protobuf::EnumOrUnknown::from_i32(0),
            GroupId: ::std::string::String::new(),
            Content: ::std::string::String::new(),
            Extras: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  设备类型
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:message.DeviceType)
pub enum DeviceType {
    // @@protoc_insertion_point(enum_value:message.DeviceType.DEVICE_TYPE_UNKNOW)
    DEVICE_TYPE_UNKNOW = 0,
    // @@protoc_insertion_point(enum_value:message.DeviceType.PC)
    PC = 1,
    // @@protoc_insertion_point(enum_value:message.DeviceType.ANDROID)
    ANDROID = 2,
    // @@protoc_insertion_point(enum_value:message.DeviceType.IOS)
    IOS = 3,
}

impl ::protobuf::Enum for DeviceType {
    const NAME: &'static str = "DeviceType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DeviceType> {
        match value {
            0 => ::std::option::Option::Some(DeviceType::DEVICE_TYPE_UNKNOW),
            1 => ::std::option::Option::Some(DeviceType::PC),
            2 => ::std::option::Option::Some(DeviceType::ANDROID),
            3 => ::std::option::Option::Some(DeviceType::IOS),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DeviceType] = &[
        DeviceType::DEVICE_TYPE_UNKNOW,
        DeviceType::PC,
        DeviceType::ANDROID,
        DeviceType::IOS,
    ];
}

impl ::protobuf::EnumFull for DeviceType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DeviceType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DeviceType {
    fn default() -> Self {
        DeviceType::DEVICE_TYPE_UNKNOW
    }
}

impl DeviceType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DeviceType>("DeviceType")
    }
}

/// *
///  命令类型
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:message.CommandType)
pub enum CommandType {
    // @@protoc_insertion_point(enum_value:message.CommandType.COMMAND_UNKNOW)
    COMMAND_UNKNOW = 0,
    // @@protoc_insertion_point(enum_value:message.CommandType.HEARTBEAT)
    HEARTBEAT = 1,
    // @@protoc_insertion_point(enum_value:message.CommandType.SERVER_ERROR_RESP)
    SERVER_ERROR_RESP = 2,
    // @@protoc_insertion_point(enum_value:message.CommandType.SEQ_REQ)
    SEQ_REQ = 10,
    // @@protoc_insertion_point(enum_value:message.CommandType.SEQ_RESP)
    SEQ_RESP = 11,
    // @@protoc_insertion_point(enum_value:message.CommandType.LOGIN_REQ)
    LOGIN_REQ = 20,
    // @@protoc_insertion_point(enum_value:message.CommandType.LOGIN_RESP)
    LOGIN_RESP = 21,
    // @@protoc_insertion_point(enum_value:message.CommandType.ROBOT_REQ)
    ROBOT_REQ = 30,
    // @@protoc_insertion_point(enum_value:message.CommandType.ROBOT_RESP)
    ROBOT_RESP = 31,
    // @@protoc_insertion_point(enum_value:message.CommandType.JOIN_GROUP_REQ)
    JOIN_GROUP_REQ = 40,
    // @@protoc_insertion_point(enum_value:message.CommandType.JOIN_GROUP_RESP)
    JOIN_GROUP_RESP = 41,
    // @@protoc_insertion_point(enum_value:message.CommandType.JOIN_GROUP_NOTIFY)
    JOIN_GROUP_NOTIFY = 42,
    // @@protoc_insertion_point(enum_value:message.CommandType.EXIT_GROUP_NOTIFY)
    EXIT_GROUP_NOTIFY = 43,
    // @@protoc_insertion_point(enum_value:message.CommandType.MSG_REQ)
    MSG_REQ = 50,
    // @@protoc_insertion_point(enum_value:message.CommandType.MSG_ACK)
    MSG_ACK = 51,
    // @@protoc_insertion_point(enum_value:message.CommandType.MSG_NOTIFY)
    MSG_NOTIFY = 52,
    // @@protoc_insertion_point(enum_value:message.CommandType.MSG_RESP)
    MSG_RESP = 53,
    // @@protoc_insertion_point(enum_value:message.CommandType.MSG_RESP_ACK)
    MSG_RESP_ACK = 54,
    // @@protoc_insertion_point(enum_value:message.CommandType.MSG_RESP_NOTIFY)
    MSG_RESP_NOTIFY = 55,
    // @@protoc_insertion_point(enum_value:message.CommandType.CANCEL_MSG_REQ)
    CANCEL_MSG_REQ = 60,
    // @@protoc_insertion_point(enum_value:message.CommandType.CANCEL_MSG_RESP)
    CANCEL_MSG_RESP = 61,
    // @@protoc_insertion_point(enum_value:message.CommandType.GET_MESSAGE_REQ)
    GET_MESSAGE_REQ = 70,
    // @@protoc_insertion_point(enum_value:message.CommandType.GET_MESSAGE_RESP)
    GET_MESSAGE_RESP = 71,
}

impl ::protobuf::Enum for CommandType {
    const NAME: &'static str = "CommandType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CommandType> {
        match value {
            0 => ::std::option::Option::Some(CommandType::COMMAND_UNKNOW),
            1 => ::std::option::Option::Some(CommandType::HEARTBEAT),
            2 => ::std::option::Option::Some(CommandType::SERVER_ERROR_RESP),
            10 => ::std::option::Option::Some(CommandType::SEQ_REQ),
            11 => ::std::option::Option::Some(CommandType::SEQ_RESP),
            20 => ::std::option::Option::Some(CommandType::LOGIN_REQ),
            21 => ::std::option::Option::Some(CommandType::LOGIN_RESP),
            30 => ::std::option::Option::Some(CommandType::ROBOT_REQ),
            31 => ::std::option::Option::Some(CommandType::ROBOT_RESP),
            40 => ::std::option::Option::Some(CommandType::JOIN_GROUP_REQ),
            41 => ::std::option::Option::Some(CommandType::JOIN_GROUP_RESP),
            42 => ::std::option::Option::Some(CommandType::JOIN_GROUP_NOTIFY),
            43 => ::std::option::Option::Some(CommandType::EXIT_GROUP_NOTIFY),
            50 => ::std::option::Option::Some(CommandType::MSG_REQ),
            51 => ::std::option::Option::Some(CommandType::MSG_ACK),
            52 => ::std::option::Option::Some(CommandType::MSG_NOTIFY),
            53 => ::std::option::Option::Some(CommandType::MSG_RESP),
            54 => ::std::option::Option::Some(CommandType::MSG_RESP_ACK),
            55 => ::std::option::Option::Some(CommandType::MSG_RESP_NOTIFY),
            60 => ::std::option::Option::Some(CommandType::CANCEL_MSG_REQ),
            61 => ::std::option::Option::Some(CommandType::CANCEL_MSG_RESP),
            70 => ::std::option::Option::Some(CommandType::GET_MESSAGE_REQ),
            71 => ::std::option::Option::Some(CommandType::GET_MESSAGE_RESP),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CommandType] = &[
        CommandType::COMMAND_UNKNOW,
        CommandType::HEARTBEAT,
        CommandType::SERVER_ERROR_RESP,
        CommandType::SEQ_REQ,
        CommandType::SEQ_RESP,
        CommandType::LOGIN_REQ,
        CommandType::LOGIN_RESP,
        CommandType::ROBOT_REQ,
        CommandType::ROBOT_RESP,
        CommandType::JOIN_GROUP_REQ,
        CommandType::JOIN_GROUP_RESP,
        CommandType::JOIN_GROUP_NOTIFY,
        CommandType::EXIT_GROUP_NOTIFY,
        CommandType::MSG_REQ,
        CommandType::MSG_ACK,
        CommandType::MSG_NOTIFY,
        CommandType::MSG_RESP,
        CommandType::MSG_RESP_ACK,
        CommandType::MSG_RESP_NOTIFY,
        CommandType::CANCEL_MSG_REQ,
        CommandType::CANCEL_MSG_RESP,
        CommandType::GET_MESSAGE_REQ,
        CommandType::GET_MESSAGE_RESP,
    ];
}

impl ::protobuf::EnumFull for CommandType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CommandType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CommandType::COMMAND_UNKNOW => 0,
            CommandType::HEARTBEAT => 1,
            CommandType::SERVER_ERROR_RESP => 2,
            CommandType::SEQ_REQ => 3,
            CommandType::SEQ_RESP => 4,
            CommandType::LOGIN_REQ => 5,
            CommandType::LOGIN_RESP => 6,
            CommandType::ROBOT_REQ => 7,
            CommandType::ROBOT_RESP => 8,
            CommandType::JOIN_GROUP_REQ => 9,
            CommandType::JOIN_GROUP_RESP => 10,
            CommandType::JOIN_GROUP_NOTIFY => 11,
            CommandType::EXIT_GROUP_NOTIFY => 12,
            CommandType::MSG_REQ => 13,
            CommandType::MSG_ACK => 14,
            CommandType::MSG_NOTIFY => 15,
            CommandType::MSG_RESP => 16,
            CommandType::MSG_RESP_ACK => 17,
            CommandType::MSG_RESP_NOTIFY => 18,
            CommandType::CANCEL_MSG_REQ => 19,
            CommandType::CANCEL_MSG_RESP => 20,
            CommandType::GET_MESSAGE_REQ => 21,
            CommandType::GET_MESSAGE_RESP => 22,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CommandType {
    fn default() -> Self {
        CommandType::COMMAND_UNKNOW
    }
}

impl CommandType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CommandType>("CommandType")
    }
}

/// *
///  消息类型
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:message.MsgType)
pub enum MsgType {
    // @@protoc_insertion_point(enum_value:message.MsgType.MSG_TYPE_UNKNOW)
    MSG_TYPE_UNKNOW = 0,
    // @@protoc_insertion_point(enum_value:message.MsgType.TEXT)
    TEXT = 1,
    // @@protoc_insertion_point(enum_value:message.MsgType.IMG)
    IMG = 2,
    // @@protoc_insertion_point(enum_value:message.MsgType.VOICE)
    VOICE = 3,
    // @@protoc_insertion_point(enum_value:message.MsgType.VIDEO)
    VIDEO = 4,
    // @@protoc_insertion_point(enum_value:message.MsgType.MUSIC)
    MUSIC = 5,
    // @@protoc_insertion_point(enum_value:message.MsgType.NEWS)
    NEWS = 6,
}

impl ::protobuf::Enum for MsgType {
    const NAME: &'static str = "MsgType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MsgType> {
        match value {
            0 => ::std::option::Option::Some(MsgType::MSG_TYPE_UNKNOW),
            1 => ::std::option::Option::Some(MsgType::TEXT),
            2 => ::std::option::Option::Some(MsgType::IMG),
            3 => ::std::option::Option::Some(MsgType::VOICE),
            4 => ::std::option::Option::Some(MsgType::VIDEO),
            5 => ::std::option::Option::Some(MsgType::MUSIC),
            6 => ::std::option::Option::Some(MsgType::NEWS),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MsgType] = &[
        MsgType::MSG_TYPE_UNKNOW,
        MsgType::TEXT,
        MsgType::IMG,
        MsgType::VOICE,
        MsgType::VIDEO,
        MsgType::MUSIC,
        MsgType::NEWS,
    ];
}

impl ::protobuf::EnumFull for MsgType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MsgType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MsgType {
    fn default() -> Self {
        MsgType::MSG_TYPE_UNKNOW
    }
}

impl MsgType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MsgType>("MsgType")
    }
}

/// *
///  聊天类型
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:message.ChatType)
pub enum ChatType {
    // @@protoc_insertion_point(enum_value:message.ChatType.CHAT_TYPE_UNKNOW)
    CHAT_TYPE_UNKNOW = 0,
    // @@protoc_insertion_point(enum_value:message.ChatType.PUBLIC)
    PUBLIC = 1,
    // @@protoc_insertion_point(enum_value:message.ChatType.PRIVATE)
    PRIVATE = 2,
}

impl ::protobuf::Enum for ChatType {
    const NAME: &'static str = "ChatType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChatType> {
        match value {
            0 => ::std::option::Option::Some(ChatType::CHAT_TYPE_UNKNOW),
            1 => ::std::option::Option::Some(ChatType::PUBLIC),
            2 => ::std::option::Option::Some(ChatType::PRIVATE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ChatType] = &[
        ChatType::CHAT_TYPE_UNKNOW,
        ChatType::PUBLIC,
        ChatType::PRIVATE,
    ];
}

impl ::protobuf::EnumFull for ChatType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ChatType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ChatType {
    fn default() -> Self {
        ChatType::CHAT_TYPE_UNKNOW
    }
}

impl ChatType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ChatType>("ChatType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\x12\x07message\"\xbe\x02\n\x07Message\x12\x0e\n\x02Id\
    \x18\x01\x20\x01(\x03R\x02Id\x12\x10\n\x03Seq\x18\x02\x20\x01(\x03R\x03S\
    eq\x12\x12\n\x04From\x18\x03\x20\x01(\x03R\x04From\x12\x0e\n\x02To\x18\
    \x04\x20\x01(\x03R\x02To\x12\x1e\n\nCreateTime\x18\x05\x20\x01(\x03R\nCr\
    eateTime\x12&\n\x03Cmd\x18\x06\x20\x01(\x0e2\x14.message.CommandTypeR\
    \x03Cmd\x12*\n\x07MsgType\x18\x07\x20\x01(\x0e2\x10.message.MsgTypeR\x07\
    MsgType\x12-\n\x08ChatType\x18\x08\x20\x01(\x0e2\x11.message.ChatTypeR\
    \x08ChatType\x12\x18\n\x07GroupId\x18\t\x20\x01(\tR\x07GroupId\x12\x18\n\
    \x07Content\x18\n\x20\x01(\tR\x07Content\x12\x16\n\x06Extras\x18\x0b\x20\
    \x01(\tR\x06Extras*B\n\nDeviceType\x12\x16\n\x12DEVICE_TYPE_UNKNOW\x10\0\
    \x12\x06\n\x02PC\x10\x01\x12\x0b\n\x07ANDROID\x10\x02\x12\x07\n\x03IOS\
    \x10\x03*\xaa\x03\n\x0bCommandType\x12\x12\n\x0eCOMMAND_UNKNOW\x10\0\x12\
    \r\n\tHEARTBEAT\x10\x01\x12\x15\n\x11SERVER_ERROR_RESP\x10\x02\x12\x0b\n\
    \x07SEQ_REQ\x10\n\x12\x0c\n\x08SEQ_RESP\x10\x0b\x12\r\n\tLOGIN_REQ\x10\
    \x14\x12\x0e\n\nLOGIN_RESP\x10\x15\x12\r\n\tROBOT_REQ\x10\x1e\x12\x0e\n\
    \nROBOT_RESP\x10\x1f\x12\x12\n\x0eJOIN_GROUP_REQ\x10(\x12\x13\n\x0fJOIN_\
    GROUP_RESP\x10)\x12\x15\n\x11JOIN_GROUP_NOTIFY\x10*\x12\x15\n\x11EXIT_GR\
    OUP_NOTIFY\x10+\x12\x0b\n\x07MSG_REQ\x102\x12\x0b\n\x07MSG_ACK\x103\x12\
    \x0e\n\nMSG_NOTIFY\x104\x12\x0c\n\x08MSG_RESP\x105\x12\x10\n\x0cMSG_RESP\
    _ACK\x106\x12\x13\n\x0fMSG_RESP_NOTIFY\x107\x12\x12\n\x0eCANCEL_MSG_REQ\
    \x10<\x12\x13\n\x0fCANCEL_MSG_RESP\x10=\x12\x13\n\x0fGET_MESSAGE_REQ\x10\
    F\x12\x14\n\x10GET_MESSAGE_RESP\x10G*\\\n\x07MsgType\x12\x13\n\x0fMSG_TY\
    PE_UNKNOW\x10\0\x12\x08\n\x04TEXT\x10\x01\x12\x07\n\x03IMG\x10\x02\x12\t\
    \n\x05VOICE\x10\x03\x12\t\n\x05VIDEO\x10\x04\x12\t\n\x05MUSIC\x10\x05\
    \x12\x08\n\x04NEWS\x10\x06*9\n\x08ChatType\x12\x14\n\x10CHAT_TYPE_UNKNOW\
    \x10\0\x12\n\n\x06PUBLIC\x10\x01\x12\x0b\n\x07PRIVATE\x10\x02B\nZ\x08/me\
    ssageJ\xc0\x19\n\x06\x12\x04\x02\0^\x01\nB\n\x01\x0c\x12\x03\x02\0\x12\
    \x1a8\x20Generated\x20by\x20github.com/davyxu/protoplus\n\x20DO\x20NOT\
    \x20EDIT!\n\n\x08\n\x01\x02\x12\x03\x03\0\x10\n\x08\n\x01\x08\x12\x03\
    \x05\0\x1f\n\t\n\x02\x08\x0b\x12\x03\x05\0\x1f\n\x1c\n\x02\x05\0\x12\x04\
    \n\0\x10\x01\x1a\x10*\n\x20\xe8\xae\xbe\xe5\xa4\x87\xe7\xb1\xbb\xe5\x9e\
    \x8b\n\n\n\n\x03\x05\0\x01\x12\x03\n\x05\x0f\n\x0b\n\x04\x05\0\x02\0\x12\
    \x03\x0b\x02\x19\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x0b\x02\x14\n\x0c\n\
    \x05\x05\0\x02\0\x02\x12\x03\x0b\x17\x18\n\x11\n\x04\x05\0\x02\x01\x12\
    \x03\r\x02\t\"\x04\x20PC\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\r\x02\
    \x04\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\r\x07\x08\n\x15\n\x04\x05\0\
    \x02\x02\x12\x03\x0e\x02\x0e\"\x08\x20\xe5\xae\x89\xe5\x8d\x93\n\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03\x0e\x02\t\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03\x0e\x0c\r\n\x12\n\x04\x05\0\x02\x03\x12\x03\x0f\x02\n\"\x05\x20\
    IOS\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x0f\x02\x05\n\x0c\n\x05\x05\
    \0\x02\x03\x02\x12\x03\x0f\x08\t\n\x1c\n\x02\x05\x01\x12\x04\x15\06\x01\
    \x1a\x10*\n\x20\xe5\x91\xbd\xe4\xbb\xa4\xe7\xb1\xbb\xe5\x9e\x8b\n\n\n\n\
    \x03\x05\x01\x01\x12\x03\x15\x05\x10\n\x0b\n\x04\x05\x01\x02\0\x12\x03\
    \x16\x02\x15\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\x16\x02\x10\n\x0c\n\
    \x05\x05\x01\x02\0\x02\x12\x03\x16\x13\x14\n\x1b\n\x04\x05\x01\x02\x01\
    \x12\x03\x18\x02\x10\"\x0e\x20\xe5\xbf\x83\xe8\xb7\xb3\xe8\xaf\xb7\xe6\
    \xb1\x82\n\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x18\x02\x0b\n\x0c\n\
    \x05\x05\x01\x02\x01\x02\x12\x03\x18\x0e\x0f\n!\n\x04\x05\x01\x02\x02\
    \x12\x03\x1a\x02\x18\"\x14\x20\xe4\xbc\x9a\xe8\xaf\x9d\xe5\x87\xba\xe7\
    \x8e\xb0\xe9\x94\x99\xe8\xaf\xaf\n\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\
    \x03\x1a\x02\x13\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x1a\x16\x17\n\
    \x1d\n\x04\x05\x01\x02\x03\x12\x03\x1c\x02\x0f\"\x10\x20\xe8\x8e\xb7\xe5\
    \x8f\x96\xe6\xb6\x88\xe6\x81\xafID\n\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\
    \x03\x1c\x02\t\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\x1c\x0c\x0e\n\x1d\
    \n\x04\x05\x01\x02\x04\x12\x03\x1d\x02\x10\"\x10\x20\xe5\x93\x8d\xe5\xba\
    \x94\xe6\xb6\x88\xe6\x81\xafID\n\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x03\
    \x1d\x02\n\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03\x1d\r\x0f\n\x1b\n\x04\
    \x05\x01\x02\x05\x12\x03\x1f\x02\x11\"\x0e\x20\xe7\x99\xbb\xe5\xbd\x95\
    \xe8\xaf\xb7\xe6\xb1\x82\n\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x03\x1f\
    \x02\x0b\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x03\x1f\x0e\x10\n\x1b\n\x04\
    \x05\x01\x02\x06\x12\x03\x20\x02\x12\"\x0e\x20\xe7\x99\xbb\xe5\xbd\x95\
    \xe5\x93\x8d\xe5\xba\x94\n\n\x0c\n\x05\x05\x01\x02\x06\x01\x12\x03\x20\
    \x02\x0c\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\x03\x20\x0f\x11\n$\n\x04\
    \x05\x01\x02\x07\x12\x03\"\x02\x11\"\x17\x20\xe8\x87\xaa\xe5\x8a\xa8\xe6\
    \x9c\xba\xe5\x99\xa8\xe4\xba\xba\xe8\xaf\xb7\xe6\xb1\x82\n\n\x0c\n\x05\
    \x05\x01\x02\x07\x01\x12\x03\"\x02\x0b\n\x0c\n\x05\x05\x01\x02\x07\x02\
    \x12\x03\"\x0e\x10\n$\n\x04\x05\x01\x02\x08\x12\x03#\x02\x12\"\x17\x20\
    \xe8\x87\xaa\xe5\x8a\xa8\xe6\x9c\xba\xe5\x99\xa8\xe4\xba\xba\xe5\x93\x8d\
    \xe5\xba\x94\n\n\x0c\n\x05\x05\x01\x02\x08\x01\x12\x03#\x02\x0c\n\x0c\n\
    \x05\x05\x01\x02\x08\x02\x12\x03#\x0f\x11\n!\n\x04\x05\x01\x02\t\x12\x03\
    %\x02\x16\"\x14\x20\xe5\x8a\xa0\xe5\x85\xa5\xe7\xbe\xa4\xe7\xbb\x84\xe8\
    \xaf\xb7\xe6\xb1\x82\n\n\x0c\n\x05\x05\x01\x02\t\x01\x12\x03%\x02\x10\n\
    \x0c\n\x05\x05\x01\x02\t\x02\x12\x03%\x13\x15\n!\n\x04\x05\x01\x02\n\x12\
    \x03&\x02\x17\"\x14\x20\xe5\x8a\xa0\xe5\x85\xa5\xe7\xbe\xa4\xe7\xbb\x84\
    \xe5\x93\x8d\xe5\xba\x94\n\n\x0c\n\x05\x05\x01\x02\n\x01\x12\x03&\x02\
    \x11\n\x0c\n\x05\x05\x01\x02\n\x02\x12\x03&\x14\x16\n!\n\x04\x05\x01\x02\
    \x0b\x12\x03'\x02\x19\"\x14\x20\xe5\x8a\xa0\xe5\x85\xa5\xe7\xbe\xa4\xe7\
    \xbb\x84\xe9\x80\x9a\xe7\x9f\xa5\n\n\x0c\n\x05\x05\x01\x02\x0b\x01\x12\
    \x03'\x02\x13\n\x0c\n\x05\x05\x01\x02\x0b\x02\x12\x03'\x16\x18\n!\n\x04\
    \x05\x01\x02\x0c\x12\x03(\x02\x19\"\x14\x20\xe9\x80\x80\xe5\x87\xba\xe7\
    \xbe\xa4\xe7\xbb\x84\xe9\x80\x9a\xe7\x9f\xa5\n\n\x0c\n\x05\x05\x01\x02\
    \x0c\x01\x12\x03(\x02\x13\n\x0c\n\x05\x05\x01\x02\x0c\x02\x12\x03(\x16\
    \x18\n!\n\x04\x05\x01\x02\r\x12\x03*\x02\x0f\"\x14\x20\xe8\x81\x8a\xe5\
    \xa4\xa9\xe6\xb6\x88\xe6\x81\xaf\xe8\xaf\xb7\xe6\xb1\x82\n\n\x0c\n\x05\
    \x05\x01\x02\r\x01\x12\x03*\x02\t\n\x0c\n\x05\x05\x01\x02\r\x02\x12\x03*\
    \x0c\x0e\n'\n\x04\x05\x01\x02\x0e\x12\x03+\x02\x0f\"\x1a\x20\xe8\x81\x8a\
    \xe5\xa4\xa9\xe6\xb6\x88\xe6\x81\xaf\xe8\xaf\xb7\xe6\xb1\x82\xe5\x9b\x9e\
    \xe6\x89\xa7\n\n\x0c\n\x05\x05\x01\x02\x0e\x01\x12\x03+\x02\t\n\x0c\n\
    \x05\x05\x01\x02\x0e\x02\x12\x03+\x0c\x0e\n!\n\x04\x05\x01\x02\x0f\x12\
    \x03,\x02\x12\"\x14\x20\xe8\x81\x8a\xe5\xa4\xa9\xe6\xb6\x88\xe6\x81\xaf\
    \xe9\x80\x9a\xe7\x9f\xa5\n\n\x0c\n\x05\x05\x01\x02\x0f\x01\x12\x03,\x02\
    \x0c\n\x0c\n\x05\x05\x01\x02\x0f\x02\x12\x03,\x0f\x11\n9\n\x04\x05\x01\
    \x02\x10\x12\x03-\x02\x10\",\x20\xe8\x81\x8a\xe5\xa4\xa9\xe6\xb6\x88\xe6\
    \x81\xaf\xe5\x93\x8d\xe5\xba\x94\xef\xbc\x88\xe5\x8d\xb3\xe6\x8e\xa5\xe6\
    \x94\xb6\xe5\x88\xb0\xe6\xb6\x88\xe6\x81\xaf\xef\xbc\x89\n\n\x0c\n\x05\
    \x05\x01\x02\x10\x01\x12\x03-\x02\n\n\x0c\n\x05\x05\x01\x02\x10\x02\x12\
    \x03-\r\x0f\n'\n\x04\x05\x01\x02\x11\x12\x03.\x02\x14\"\x1a\x20\xe8\x81\
    \x8a\xe5\xa4\xa9\xe6\xb6\x88\xe6\x81\xaf\xe5\x93\x8d\xe5\xba\x94\xe5\x9b\
    \x9e\xe6\x89\xa7\n\n\x0c\n\x05\x05\x01\x02\x11\x01\x12\x03.\x02\x0e\n\
    \x0c\n\x05\x05\x01\x02\x11\x02\x12\x03.\x11\x13\n'\n\x04\x05\x01\x02\x12\
    \x12\x03/\x02\x17\"\x1a\x20\xe8\x81\x8a\xe5\xa4\xa9\xe6\xb6\x88\xe6\x81\
    \xaf\xe5\x93\x8d\xe5\xba\x94\xe9\x80\x9a\xe7\x9f\xa5\n\n\x0c\n\x05\x05\
    \x01\x02\x12\x01\x12\x03/\x02\x11\n\x0c\n\x05\x05\x01\x02\x12\x02\x12\
    \x03/\x14\x16\n!\n\x04\x05\x01\x02\x13\x12\x031\x02\x16\"\x14\x20\xe6\
    \x92\xa4\xe5\x9b\x9e\xe6\xb6\x88\xe6\x81\xaf\xe8\xaf\xb7\xe6\xb1\x82\n\n\
    \x0c\n\x05\x05\x01\x02\x13\x01\x12\x031\x02\x10\n\x0c\n\x05\x05\x01\x02\
    \x13\x02\x12\x031\x13\x15\n!\n\x04\x05\x01\x02\x14\x12\x032\x02\x17\"\
    \x14\x20\xe6\x92\xa4\xe5\x9b\x9e\xe6\xb6\x88\xe6\x81\xaf\xe5\x93\x8d\xe5\
    \xba\x94\n\n\x0c\n\x05\x05\x01\x02\x14\x01\x12\x032\x02\x11\n\x0c\n\x05\
    \x05\x01\x02\x14\x02\x12\x032\x14\x16\n!\n\x04\x05\x01\x02\x15\x12\x034\
    \x02\x17\"\x14\x20\xe8\x8e\xb7\xe5\x8f\x96\xe6\xb6\x88\xe6\x81\xaf\xe8\
    \xaf\xb7\xe6\xb1\x82\n\n\x0c\n\x05\x05\x01\x02\x15\x01\x12\x034\x02\x11\
    \n\x0c\n\x05\x05\x01\x02\x15\x02\x12\x034\x14\x16\n!\n\x04\x05\x01\x02\
    \x16\x12\x035\x02\x18\"\x14\x20\xe8\x8e\xb7\xe5\x8f\x96\xe6\xb6\x88\xe6\
    \x81\xaf\xe5\x93\x8d\xe5\xba\x94\n\n\x0c\n\x05\x05\x01\x02\x16\x01\x12\
    \x035\x02\x12\n\x0c\n\x05\x05\x01\x02\x16\x02\x12\x035\x15\x17\n\x1c\n\
    \x02\x05\x02\x12\x04;\0D\x01\x1a\x10*\n\x20\xe6\xb6\x88\xe6\x81\xaf\xe7\
    \xb1\xbb\xe5\x9e\x8b\n\n\n\n\x03\x05\x02\x01\x12\x03;\x05\x0c\n\x15\n\
    \x04\x05\x02\x02\0\x12\x03<\x02\x16\"\x08\x20\xe6\x9c\xaa\xe7\x9f\xa5\n\
    \n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03<\x02\x11\n\x0c\n\x05\x05\x02\x02\
    \0\x02\x12\x03<\x14\x15\n\x15\n\x04\x05\x02\x02\x01\x12\x03>\x02\x0b\"\
    \x08\x20\xe6\x96\x87\xe6\x9c\xac\n\n\x0c\n\x05\x05\x02\x02\x01\x01\x12\
    \x03>\x02\x06\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03>\t\n\n\x15\n\x04\
    \x05\x02\x02\x02\x12\x03?\x02\n\"\x08\x20\xe5\x9b\xbe\xe7\x89\x87\n\n\
    \x0c\n\x05\x05\x02\x02\x02\x01\x12\x03?\x02\x05\n\x0c\n\x05\x05\x02\x02\
    \x02\x02\x12\x03?\x08\t\n\x15\n\x04\x05\x02\x02\x03\x12\x03@\x02\x0c\"\
    \x08\x20\xe8\xaf\xad\xe9\x9f\xb3\n\n\x0c\n\x05\x05\x02\x02\x03\x01\x12\
    \x03@\x02\x07\n\x0c\n\x05\x05\x02\x02\x03\x02\x12\x03@\n\x0b\n\x15\n\x04\
    \x05\x02\x02\x04\x12\x03A\x02\x0c\"\x08\x20\xe8\xa7\x86\xe9\xa2\x91\n\n\
    \x0c\n\x05\x05\x02\x02\x04\x01\x12\x03A\x02\x07\n\x0c\n\x05\x05\x02\x02\
    \x04\x02\x12\x03A\n\x0b\n\x15\n\x04\x05\x02\x02\x05\x12\x03B\x02\x0c\"\
    \x08\x20\xe9\x9f\xb3\xe4\xb9\x90\n\n\x0c\n\x05\x05\x02\x02\x05\x01\x12\
    \x03B\x02\x07\n\x0c\n\x05\x05\x02\x02\x05\x02\x12\x03B\n\x0b\n\x15\n\x04\
    \x05\x02\x02\x06\x12\x03C\x02\x0b\"\x08\x20\xe5\x9b\xbe\xe6\x96\x87\n\n\
    \x0c\n\x05\x05\x02\x02\x06\x01\x12\x03C\x02\x06\n\x0c\n\x05\x05\x02\x02\
    \x06\x02\x12\x03C\t\n\n\x1c\n\x02\x05\x03\x12\x04I\0M\x01\x1a\x10*\n\x20\
    \xe8\x81\x8a\xe5\xa4\xa9\xe7\xb1\xbb\xe5\x9e\x8b\n\n\n\n\x03\x05\x03\x01\
    \x12\x03I\x05\r\n\x15\n\x04\x05\x03\x02\0\x12\x03J\x02\x17\"\x08\x20\xe6\
    \x9c\xaa\xe7\x9f\xa5\n\n\x0c\n\x05\x05\x03\x02\0\x01\x12\x03J\x02\x12\n\
    \x0c\n\x05\x05\x03\x02\0\x02\x12\x03J\x15\x16\n\x15\n\x04\x05\x03\x02\
    \x01\x12\x03K\x02\r\"\x08\x20\xe5\x85\xac\xe8\x81\x8a\n\n\x0c\n\x05\x05\
    \x03\x02\x01\x01\x12\x03K\x02\x08\n\x0c\n\x05\x05\x03\x02\x01\x02\x12\
    \x03K\x0b\x0c\n\x15\n\x04\x05\x03\x02\x02\x12\x03L\x02\x0e\"\x08\x20\xe7\
    \xa7\x81\xe8\x81\x8a\n\n\x0c\n\x05\x05\x03\x02\x02\x01\x12\x03L\x02\t\n\
    \x0c\n\x05\x05\x03\x02\x02\x02\x12\x03L\x0c\r\n\x19\n\x02\x04\0\x12\x04R\
    \0^\x01\x1a\r*\n\x20\xe6\xb6\x88\xe6\x81\xaf\xe4\xbd\x93\n\n\n\n\x03\x04\
    \0\x01\x12\x03R\x08\x0f\n\x17\n\x04\x04\0\x02\0\x12\x03S\x02\x0f\"\n\x20\
    \xe6\xb6\x88\xe6\x81\xafID\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03S\x02\
    \x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03S\x08\n\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03S\r\x0e\n\x1e\n\x04\x04\0\x02\x01\x12\x03T\x02\x10\"\x11\x20\
    \xe6\xb6\x88\xe6\x81\xaf\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7\n\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03T\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03T\x08\x0b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03T\x0e\x0f\n\x1e\n\
    \x04\x04\0\x02\x02\x12\x03U\x02\x11\"\x11\x20\xe6\xb6\x88\xe6\x81\xaf\
    \xe5\x8f\x91\xe9\x80\x81\xe4\xba\xba\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03U\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03U\x08\x0c\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03U\x0f\x10\n\x1e\n\x04\x04\0\x02\x03\x12\x03V\
    \x02\x0f\"\x11\x20\xe6\xb6\x88\xe6\x81\xaf\xe6\x8e\xa5\xe6\x94\xb6\xe4\
    \xba\xba\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03V\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x03V\x08\n\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03V\
    \r\x0e\n!\n\x04\x04\0\x02\x04\x12\x03W\x02\x17\"\x14\x20\xe6\xb6\x88\xe6\
    \x81\xaf\xe5\x88\x9b\xe5\xbb\xba\xe6\x97\xb6\xe9\x97\xb4\n\n\x0c\n\x05\
    \x04\0\x02\x04\x05\x12\x03W\x02\x07\n\x0c\n\x05\x04\0\x02\x04\x01\x12\
    \x03W\x08\x12\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03W\x15\x16\n\x1b\n\x04\
    \x04\0\x02\x05\x12\x03X\x02\x16\"\x0e\x20\xe5\x91\xbd\xe4\xbb\xa4\xe7\
    \xb1\xbb\xe5\x9e\x8b\n\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03X\x02\r\n\
    \x0c\n\x05\x04\0\x02\x05\x01\x12\x03X\x0e\x11\n\x0c\n\x05\x04\0\x02\x05\
    \x03\x12\x03X\x14\x15\n\x1b\n\x04\x04\0\x02\x06\x12\x03Y\x02\x16\"\x0e\
    \x20\xe6\xb6\x88\xe6\x81\xaf\xe7\xb1\xbb\xe5\x9e\x8b\n\n\x0c\n\x05\x04\0\
    \x02\x06\x06\x12\x03Y\x02\t\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03Y\n\x11\
    \n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03Y\x14\x15\n\x1b\n\x04\x04\0\x02\
    \x07\x12\x03Z\x02\x18\"\x0e\x20\xe8\x81\x8a\xe5\xa4\xa9\xe7\xb1\xbb\xe5\
    \x9e\x8b\n\n\x0c\n\x05\x04\0\x02\x07\x06\x12\x03Z\x02\n\n\x0c\n\x05\x04\
    \0\x02\x07\x01\x12\x03Z\x0b\x13\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03Z\
    \x16\x17\n\x17\n\x04\x04\0\x02\x08\x12\x03[\x02\x15\"\n\x20\xe7\xbe\xa4\
    \xe7\xbb\x84ID\n\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03[\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x08\x01\x12\x03[\t\x10\n\x0c\n\x05\x04\0\x02\x08\x03\x12\
    \x03[\x13\x14\n\x1b\n\x04\x04\0\x02\t\x12\x03\\\x02\x16\"\x0e\x20\xe6\
    \xb6\x88\xe6\x81\xaf\xe5\x86\x85\xe5\xae\xb9\n\n\x0c\n\x05\x04\0\x02\t\
    \x05\x12\x03\\\x02\x08\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\\\t\x10\n\x0c\
    \n\x05\x04\0\x02\t\x03\x12\x03\\\x13\x15\n+\n\x04\x04\0\x02\n\x12\x03]\
    \x02\x15\"\x1e\x20\xe9\xa2\x9d\xe5\xa4\x96\xe5\xad\x97\xe6\xae\xb5\xef\
    \xbc\x88JSON\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x89\n\n\x0c\n\x05\x04\0\x02\
    \n\x05\x12\x03]\x02\x08\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03]\t\x0f\n\x0c\
    \n\x05\x04\0\x02\n\x03\x12\x03]\x12\x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Message::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(4);
            enums.push(DeviceType::generated_enum_descriptor_data());
            enums.push(CommandType::generated_enum_descriptor_data());
            enums.push(MsgType::generated_enum_descriptor_data());
            enums.push(ChatType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
